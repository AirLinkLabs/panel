<%- include('components/template') %>
<main id="content">
  <div class="bg-transparent">
    <div class="sm:flex sm:items-center px-8 pt-4">
      <div class="sm:flex-auto">
        <h1 class="text-base font-medium leading-6 text-white mb-4"><%= req.translations.instances %></h1>

      </div>
      
    </div>
  </div>
  
  <div class="px-4 sm:px-6 lg:px-8">
    
      <div class="flex flex-col">
        <div class="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
          <div class="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
            <div class="shadow overflow-hidden border-b border-gray-700/10 sm:rounded-lg">
              <table class="min-w-full divide-y divide-gray-700/10">
                <thead class="bg-gray-700/25">
                  <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">STATUS</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">CPU</th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">RAM</th>
                  </tr>
                </thead>
                <tbody class="bg-gray-700/50 divide-y divide-gray-700/10">
            
                  <% if (instances.length > 0) { %>
                    <% instances.forEach(function (instance) { %>
                      <tr>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-white"><%= instance.Name %></td>
                        <td data-status-bg class="px-6 py-4 whitespace-nowrap text-sm text-gray-400"><%= req.translations.loading %></td>
                        <td data-cpu-usage class="px-6 py-4 whitespace-nowrap text-sm text-gray-400"><%= req.translations.loading %></td>
                        <td data-ram-usage class="px-6 py-4 whitespace-nowrap text-sm text-gray-400"><%= req.translations.loading %></td>
                      </tr>
                    <% }); %>
                  <% } else { %>
                    <tr>
                      <td colspan="4" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
                        No Instances Found
                      </td>
                    </tr>
                  <% } %>                  
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  </div>
</main>
<%- include('components/footer') %>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const instances = document.querySelectorAll('[data-instance-id]');

    instances.forEach(instance => {
      const containerId = instance.dataset.instanceId;
      const isSecure = window.location.protocol === 'https:';
      const wsProtocol = isSecure ? 'wss' : 'ws';
      const wsPort = isSecure ? '' : `:<%= config.port %>`;
      const socket = new WebSocket(`${wsProtocol}://<%= config.domain %>${wsPort}/stats/${containerId}`);

      const statusElement = instance.querySelector('[data-status]');
      const statusBg = instance.querySelector('[data-status-bg]');
      const ramUsageElement = instance.querySelector('[data-ram-usage]');
      const ramLimitElement = instance.querySelector('[data-ram-limit]');
      const cpuUsageElement = instance.querySelector('[data-cpu-usage]');

      function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0.00 B';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['B', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
      }

      socket.onmessage = event => {

        let stats;

        try {
          stats = JSON.parse(event.data);
        } catch (e) {
          console.error('Error parsing JSON:', e);
          console.log('Raw data:', event.data);
          return;
        }

        if (stats.error) {
          console.error('Error fetching stats:', stats.error);
          return;
        }

        // Update RAM usage
        const ramUsageRaw = stats.memory_stats.usage / 1024;
        const ramUsage = isNaN(ramUsageRaw) ? '0 B' : formatBytes(ramUsageRaw);
        const ramLimitRaw = stats.memory_stats.limit / 1024;
        const ramLimit = isNaN(ramLimitRaw) ? '0 B' : formatBytes(ramLimitRaw);
        ramUsageElement.textContent = ramUsage + ' <%= req.translations.ramUsage %>';

        // Determine status based on RAM usage
        if (isNaN(ramUsageRaw)) {
          statusElement.className = 'text-neutral-500';
          statusElement.textContent = 'Offline';
        } else if (ramUsageRaw > 1) {
          statusBg.classList.remove('bg-neutral-600/20');
          statusBg.classList.add('bg-emerald-600/10');
          statusElement.className = 'text-emerald-500';
          statusElement.textContent = 'Online';
        }

        // Update CPU usage
        const cpuDelta = stats.cpu_stats.cpu_usage.total_usage - stats.precpu_stats.cpu_usage.total_usage;
        const systemCpuDelta = stats.cpu_stats.system_cpu_usage - stats.precpu_stats.system_cpu_usage;
        const cpuUsagePercent = (cpuDelta && systemCpuDelta && !isNaN(cpuDelta) && !isNaN(systemCpuDelta))
          ? ((cpuDelta / systemCpuDelta) * 100).toFixed(2) + '%'
          : '0%';
        cpuUsageElement.textContent = cpuUsagePercent + ' <%= req.translations.cpuUsage %>';
      };
    });
  });
</script>