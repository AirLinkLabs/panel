<%- include('../components/admin_template') %>
<main id="content">
   <div class="bg-transparent">
      <div class="sm:flex sm:items-center px-8 pt-4">
         <div class="sm:flex-auto">
           <h1 class="text-base font-medium leading-6 text-white mb-4"><%= req.translations.images %></h1>
           <p class="mt-1 tracking-tight text-sm text-white"><%= req.translations.imagesText %></p>
         </div>
         <div class="mt-4 sm:ml-8 sm:mt-0 sm:flex-none">
        
        </div>
       </div>
      <div style="display: block;" id="nodeTable" class="mt-6 w-full">
      <table class="mt-6 w-full whitespace-nowrap text-left">
        <colgroup>
          <col class="w-full sm:w-4/12">
          <col class="lg:w-4/12">
          <col class="lg:w-2/12">
          <col class="lg:w-1/12">
          <col class="lg:w-1/12">
        </colgroup>
        <thead class="border-b border-white/5 text-sm leading-6 text-white">
          <tr>
            
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"><%= req.translations.name %></th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"><%= req.translations.author %></th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"><%= req.translations.dockerImage %></th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"><%= req.translations.remove %></th>
            <th> <button id="uploadimage" type="button" class=" transition px-4 py-2 text-sm font-medium text-white bg-blue-500 border border-blue-500 rounded-lg hover:bg-blue-600 hover:text-white focus:z-10 focus:ring-2 focus:ring-blue-600 focus:text-white">
              <%= req.translations.importImage %>
            </button></th>

          </tr>
        </thead>
        <tbody class="divide-y divide-white/5">
         <% images.forEach(function(image) { %>
          <tr>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-white"><%= image.Name %></td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400"><%= image.Author %> (<%= image.AuthorName %>)</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400"><%= image.Image %></td>
            <td>
              <button class="px-6 py-4 whitespace-nowrap text-sm text-gray-400 deleteImageButton" data-image-id="<%= image.Id %>" data-user-id="<%= user.userId %>">
                  <%= req.translations.imageDelete %>
              </button>
          </td>
          
          </tr>
          <% }); %>
        </tbody>
      </table>
      </div>
      <div style="display: none;" id="imageDetail" class="mt-6 pl-8 w-full text-white">
        <button id="backButton" class="block rounded-xl bg-neutral-800 px-3 py-2 text-center text-sm font-medium text-white shadow-lg hover:bg-neutral-600 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
          <%= req.translations.back %>
        </button>
        <h1 id="imageName" class="text-2xl font-bold mt-4"></h1>
        <p id="imageDescription" class="mt-2 text-neutral-400"></p>
        <div class="mt-4">
          <span id="dockerImage" class="bg-white/5 text-white text-sm font-mono mr-2 px-2.5 py-1 rounded-xl"></span>
          <span id="envVars" class="bg-white/5 text-white text-sm font-mono mr-2 px-2.5 py-1 rounded-xl"></span>
        </div>
        <div class="mt-4">
          <p id="authorInfo" class="text-neutral-400"></p>
        </div>
        <div class="mt-4 flex">
          <button id="deleteImageButton" class="block rounded-xl bg-red-600 px-3 py-2 text-center text-sm font-medium text-white shadow-lg hover:bg-red-500 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
            <%= req.translations.imageDelete %>
          </button>
          <button id="replaceImageButton" class="block rounded-xl ml-2 bg-neutral-800 px-3 py-2 text-center text-sm font-medium text-white shadow-lg hover:bg-neutral-600 transition focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
            <%= req.translations.imageReplace %>
          </button>
        </div>
      </div>
    </div>
</main>
<%- include('../components/footer') %>
<script>
  document.addEventListener("DOMContentLoaded", async function(event) {
      var uploadBtn = document.getElementById('uploadimage');
      var imageRows = document.querySelectorAll('.image-row');
      var nodeTable = document.getElementById('nodeTable');
      var imageDetail = document.getElementById('imageDetail');
      var backButton = document.getElementById('backButton');
      var imageName = document.getElementById('imageName');
      var imageDescription = document.getElementById('imageDescription');
      var dockerImage = document.getElementById('dockerImage');
      var envVars = document.getElementById('envVars');
      var authorInfo = document.getElementById('authorInfo');
      var deleteImageButton = document.getElementById('deleteImageButton');
      var replaceImageButton = document.getElementById('replaceImageButton');
      var currentImage = null;

      uploadBtn.addEventListener('click', async function() {
          var input = document.createElement('input');
          input.type = 'file';
          input.accept = '.json';
          input.click();
          input.addEventListener('change', function(event) {
              var file = event.target.files[0];
              if (file && file.type === 'application/json') {
                  var reader = new FileReader();
                  reader.onload = function(event) {
                      var jsonData = event.target.result;
                      var xhr = new XMLHttpRequest();
                      xhr.open('POST', '/admin/images/upload', true);
                      xhr.setRequestHeader('Content-Type', 'application/json');
                      xhr.onload = function() {
                          if (xhr.status === 200) {
                              console.log('Image uploaded successfully.');
                              
                              setTimeout(function() {
                                  window.location.reload();
                              }, 500);
                          } else {
                              console.error('Error uploading image.');
                          }
                      };
                      xhr.onerror = function() {
                          console.error('Network error.');
                      };
                      xhr.send(jsonData);
                  };
                  reader.readAsText(file);
              } else {
                  alert('<%= req.translations.jsonSelectFile %>');
              }
          });
      });

      imageRows.forEach(function(row) {
          row.addEventListener('click', async function() {
              var image = JSON.parse(this.dataset.image);
              currentImage = image;
              imageName.textContent = image.Name;
              imageDescription.textContent = image.Description;
              dockerImage.textContent = image.Image;
              envVars.textContent = image.Env.join(', ');
              authorInfo.textContent = image.Author + ' (' + image.AuthorName + ')';
              nodeTable.style.display = 'none';
              imageDetail.style.display = 'block';
          });
      });

      backButton.addEventListener('click', function() {
          nodeTable.style.display = 'block';
          imageDetail.style.display = 'none';
      });

      // After your other event listeners
document.querySelectorAll('.deleteImageButton').forEach(function(button) {
    button.addEventListener('click', function() {
        var imageId = this.dataset.imageId;
        deleteImage(imageId);
    });
});


      replaceImageButton.addEventListener('click', async function() {
          var input = document.createElement('input');
          input.type = 'file';
          input.accept = '.json';
          input.click();
          input.addEventListener('change', function(event) {
              var file = event.target.files[0];
              if (file && file.type === 'application/json') {
                  var reader = new FileReader();
                  reader.onload = function(event) {
                      var jsonData = event.target.result;
                      var xhr = new XMLHttpRequest();
                      xhr.open('POST', '/admin/images/upload', true);
                      xhr.setRequestHeader('Content-Type', 'application/json');
                      xhr.onload = function() {
                          if (xhr.status === 200) {
                              console.log('Image uploaded successfully.');
                              setTimeout(function() {
                                  deleteImage(currentImage.Id);
                              }, 500);
                          } else {
                              console.error('Error uploading image.');
                          }
                      };
                      xhr.onerror = function() {
                          console.error('Network error.');
                      };
                      xhr.send(jsonData);
                  };
                  reader.readAsText(file);
              } else {
                  alert('<%= req.translations.jsonSelectFile %>');
              }
          });
      });

      async function deleteImage(id) {
          var xhr = new XMLHttpRequest();
          xhr.open('POST', '/admin/images/delete', true);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.onload = function() {
              if (xhr.status === 200) {
                  console.log('Image deleted successfully.');
                  alert('Image Deleted Successfully');
                  setTimeout(function() {
                      window.location.reload();
                  }, 500);
              } else {
                  console.error('Error deleting image.');
                  alert('Error Deleting Image');
              }
          };
          xhr.onerror = function() {
              console.error('Network error.');
          };
          xhr.send(JSON.stringify({ id: id }));
      }
  });
</script>
